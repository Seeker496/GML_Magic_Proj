sf_Hotels <- st_as_sf(Hotels, coords = c("Long", "Lat"),  crs = 4326)
mapview(sf_Hotels, map.types = "CartoDB.DarkMatter", zcol="Stars")
Hotels |> drop_na(Noise.Level) |>
ggplot(aes(Noise.Level, Weighted.Star)) +
theme(panel.background = element_rect(fill = "#265a56"),
panel.grid.major = element_line(color = "black"),
panel.grid.minor = element_line(color = "black"),
plot.background = element_rect(fill = "black"),
axis.text = element_text(color = "white")) +
geom_col(fill = "#ffc39a")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
DowntoDecks <- read_csv("DowntoDecks.csv")
DowntoDecks |> count(won)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
apply(DowntoDecks, 2, count())
apply(DowntoDecks, 2, count(), simplify = T)
sapply(DowntoDecks, 2, count())
lapply(DowntoDecks, 2, count())
for (i in 2:292) {
count(DowntoDecks[i])
}
Counts <- data.frame()
for (i in 2:292) {
Counts <- rbind(Counts, count(DowntoDecks[i]))
}
View(Counts)
Counts <- data.frame()
for (i in 2:292) {
Counts <- rbind(Counts, tally(DowntoDecks[i]))
}
View(Counts)
Counts <- data.frame()
for (i in 2:292) {
Counts <- rbind(Counts, add_tally(DowntoDecks[i]))
}
DowntoDecks |> count(deck_Abrade)
Counts <- data.frame(count(DowntoDecks ,deck_Abrade))
Counts <- data.frame(count(DowntoDecks, deck_Abrade))
Counts <- cbind(Counts, count(DowntoDecks, `deck_Abuelo's Awakening`))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
DowntoDecks |> count(deck_Abrade)
DowntoDecks[,-1] |> as.matrix() |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
sum(is.na(deck_mat))
deck_mat |> hist()
print(deck-mat)
print(deck_mat)
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> drop_na() |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> hist()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
#zeros <- deck_mat == 0
#deck_mat[zeros] <- NA
deck_mat |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector() |> log10()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> hist()
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 2, 3:ncol(DowntoDecks), SIMPLIFY = T)
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0
deck_mat[zeros] <- NA
deck_mat |> hist()
deck_mat <- DowntoDecks[,-1] |> as.matrix() |> as.vector()
zeros <- deck_mat == 0 || deck_mat == 1
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 2, 3:ncol(DowntoDecks), SIMPLIFY = T)
DowntoDecks <- read_csv("DowntoDecks.csv")
DowntoDecks |> count(won)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 2, 3:ncol(DowntoDecks), SIMPLIFY = T)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 2, 2:ncol(DowntoDecks), SIMPLIFY = T)
RESULT <- data.frame()
for (i in 2:ncol(DowntoDecks)) {
RESULT <- cbind(RESULT,
mapply(winrate, i, 2:ncol(DowntoDecks), SIMPLIFY = T))
}
RESULT <- data.frame()
for (i in 2:ncol(DowntoDecks)) {
RESULT <- rbind(RESULT,
mapply(winrate, i, 2:ncol(DowntoDecks), SIMPLIFY = T))
}
View(RESULT)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 2:ncol(DowntoDecks), SIMPLIFY = T)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 && .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 2:ncol(DowntoDecks), SIMPLIFY = T)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 2:ncol(DowntoDecks), SIMPLIFY = T)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[2]] > 0) %>% count(won)
View(temp)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[2]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[3]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[4]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[6]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[6]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 2, 2:ncol(DowntoDecks), SIMPLIFY = T)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 3:ncol(DowntoDecks), SIMPLIFY = T)
DowntoDecks <- read_csv("DowntoDecks.csv")
DowntoDecks |> count(won)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 3:ncol(DowntoDecks), SIMPLIFY = T)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[6]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[7]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[8]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[9]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
for (i in 2:292) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 2:146) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 146:292) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 146:291) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 219:292) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 219:255) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 237:255) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 219:237) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
for (i in 219:228) {
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[i]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
}
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if (length(as.vector(temp)) != 4) {
return 0
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if (length(as.vector(temp)) != 4) {
return(0)
}
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 3:ncol(DowntoDecks), SIMPLIFY = T)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[5]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
length(as.vector(temp))
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[5]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
as.vector(temp)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[5]] > 0) %>% count(won)
#temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp
as.vector(temp)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[5]] > 0) %>% count(won)
#temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp
as.matrix(temp)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[5]] > 0) %>% count(won)
#temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp
length(as.matrix(temp))
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if(length(as.matrix(temp)) != 4) {
return(0)
}
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 3:ncol(DowntoDecks), SIMPLIFY = T)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if(length(as.matrix(temp)) != 4) {
return(0)
}
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
AbradeX <- mapply(winrate, 3, 2:ncol(DowntoDecks), SIMPLIFY = T)
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[4]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
temp <- DowntoDecks %>% filter(.[[3]] > 0 & .[[3]] > 0) %>% count(won)
temp[[2,2]]/(temp[[2,2]] + temp[[1,2]])
RESULT <- data.frame()
for (i in 2:ncol(DowntoDecks)) {
RESULT <- cbind(RESULT,
mapply(winrate, i, 2:ncol(DowntoDecks), SIMPLIFY = T))
}
RESULT <- data.frame()
for (i in 2:ncol(DowntoDecks)) {
RESULT <- rbind(RESULT,
mapply(winrate, i, 2:ncol(DowntoDecks), SIMPLIFY = T))
}
View(RESULT)
View(DowntoDecks)
#RESULT <- data.frame()
#for (i in 2:ncol(DowntoDecks)) {
#  RESULT <- rbind(RESULT,
#                  mapply(winrate, i, 2:ncol(DowntoDecks), SIMPLIFY = T))
#}
fwrite(RESULT, file = "DecksGraph.stl", col.names = F, showProgress = T)
install.packages("igraph")
library(igraph)
graphgraph <- graph(RESULT)
library(igraph)
graphgraph <- graph(as.matrix(RESULT))
#library(igraph)
graphgraph <- make_graph(Dodecahedral)
#library(igraph)
graphgraph <- make_graph("Dodecahedral")
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 5, vertex.label.cex = 0.5)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 5, vertex.label.cex = 0.5)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 5, vertex.label.cex = 0.5,simplify)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 10, vertex.label.cex = 0.5)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 10, vertex.label.cex = 0)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 10)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 10, vertex.label.cex = 1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.05, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot(graphgraph)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph, layout_nicely(),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graph = graphgraph,layout = layout_nicely(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph,layout = layout_nicely(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph,layout = layout_with_drl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT))
plot.igraph(graphgraph,layout = layout_with_lgl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(RESULT)
plot.igraph(graphgraph,layout = layout_with_lgl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as_adjacency_matrix(RESULT))
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as_adjacency_matrix(as.matrix(RESULT)))
View(graphgraph)
as_adjacency_matrix(RESULT)
make_graph(RESULT)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
as.matrix(RESULT,"adjacency")
#library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT,"adjacency"))
library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(RESULT,"adjacency"))
plot.igraph(graphgraph,layout = layout_with_lgl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
BasicAdjMatrix <- as.matrix()
BasicAdjMatrix <- matrix(nrow = 291, ncol = 291)
for (i in 1:nrow(RESULT)) {
for (j in 1:ncol(RESULT)) {
if(RESULT[[i,j]] > 0) {
BasicAdjMatrix[i,j] <- 1
} else {
BasicAdjMatrix[i,j] <- 0
}
}
}
View(BasicAdjMatrix)
library(igraph)
BasicAdjMatrix <- graph_from_adjacency_matrix(as.matrix(BasicAdjMatrix,"adjacency"))
plot.igraph(graphgraph,layout = layout_with_lgl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
BasicAdjMatrix <- matrix(nrow = 291, ncol = 291)
for (i in 1:nrow(RESULT)) {
for (j in 1:ncol(RESULT)) {
if(RESULT[[i,j]] > 0) {
BasicAdjMatrix[i,j] <- 1
} else {
BasicAdjMatrix[i,j] <- 0
}
}
}
library(igraph)
graphgraph <- graph_from_adjacency_matrix(as.matrix(BasicAdjMatrix,"adjacency"))
plot.igraph(graphgraph,layout = layout_with_lgl(graphgraph),
edge.arrow.size=0.5, vertex.size = 10, vertex.label.cex = 0.1)
View(DowntoDecks)
View(RESULT)
setwd("~/GitHub/GML_Magic_Proj")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(data.table)
count(RESULT >= .60)
wr <- 0.60
YesCount <- 0
NoCount <- 0
for (i in 1:291) {
for (j in 1:291) {
if (RESULT[[i,j]] >= wr)
YesCount++
else
wr <- 0.60
YesCount <- 0
NoCount <- 0
for (i in 1:291) {
for (j in 1:291) {
if (RESULT[[i,j]] >= wr) {
YesCount++
} else {
wr <- 0.60
YesCount <- 0
NoCount <- 0
for (i in 1:291) {
for (j in 1:291) {
if (RESULT[[i,j]] >= wr) {
YesCount = YesCount + 1
} else {
NoCount = NoCount + 1
}
}
}
YesCount
NoCount
wr <- 0.55
YesCount <- 0
NoCount <- 0
for (i in 1:291) {
for (j in 1:291) {
if (RESULT[[i,j]] >= wr) {
YesCount = YesCount + 1
} else {
NoCount = NoCount + 1
}
}
}
YesCount
NoCount
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if(temp %>% as.matrix() %>% length != 4) {
return(0)
}
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
DeckGraph <- sapply(2:ncol(DowntoDecks), \(x)
mapply(winrate, x, 2:ncol(DowntoDecks),
SIMPLIFY = T))
DowntoDecks <- read_csv("DowntoDecks.csv")
#DowntoDecks |> count(won)
winrate <- function (c1,c2){
temp <- DowntoDecks %>% filter(.[[c1]] > 0 & .[[c2]] > 0) %>% count(won)
if(temp %>% as.matrix() %>% length != 4) {
return(0)
}
return(temp[[2,2]]/(temp[[2,2]] + temp[[1,2]]))
}
#winrate function, card 1, card 2
#only comparing the first card, Abrade to all OTHER cards
#simplified for my poor laptop
DeckGraph <- sapply(2:ncol(DowntoDecks), \(x)
mapply(winrate, x, 2:ncol(DowntoDecks),
SIMPLIFY = T))
